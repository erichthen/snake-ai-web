<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Snake: ML model</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/3.1.3/socket.io.js"></script>
</head>
<body>
    <h1>Snake Game –– Reinforcement Learning</h1>
    <button id="start-button">Start Training</button>
    <div id="game-window">
        <canvas id="game-canvas" width="640" height="480" class="game-canvas"></canvas>
    </div>
    <h2 id="score">Score: 0</h2>
    <h2 id="record">Record: 0</h2>
    <div id="plot-container" style="display:none;">
        <img id="plot" src="" alt="Training Progress">
    </div>
    <script>
        const socket = io();
        const canvas = document.getElementById('game-canvas');
        const ctx = canvas.getContext('2d');

        document.getElementById('start-button').onclick = function() {
            fetch('/start_game', {
                method: 'POST'
            })
            .then(response => response.json())
            .then(data => {
                if (data.status === 'Training started') {
                    console.log('Training Started');
                }
            });
        };

        socket.on('frame_update', function(data) {
            const image = new Image();
            image.onload = function() {
                ctx.drawImage(image, 0, 0, canvas.width, canvas.height);
            };
            image.src = 'data:image/png;base64,' + data.frame;
        });

        socket.on('game_update', function(data) {
            document.getElementById('score').innerText = 'Score: ' + data.score;
            document.getElementById('record').innerText = 'Record: ' + data.record;
            document.getElementById('plot').src = 'data:image/png;base64,' + data.plot;
            document.getElementById('plot-container').style.display = 'block';
        });
    </script>
</body>
</html>



body {
    font-family: Arial, sans-serif;
    text-align: center;
}

button {
    padding: 10px 20px;
    font-size: 16px;
    margin: 20px;
}

#gameWindow {
    width: 640px;
    height: 480px;
    border: 2px solid black;
    margin: 20px auto;
}

#plotContainer {
    margin: 20px 0;
}

img {
    max-width: 100%;
    height: auto;
}

.game-canvas {
    background-color: black;
    width: 100%;
    height: 100%;
    display: block; /* Ensure it displays correctly */
}


import torch
import random
import numpy as np  
from collections import deque
from game import Direction, Point
from model import Linear_QNet, QTrainer
from plotting import plot
from flask_socketio import SocketIO
import eventlet


MAX_MEMORY = 100_000
BATCH_SIZE = 1000
LR = 0.001

class Agent:

    def __init__(self):
        self.num_games = 0
        self.epsilon = 0 
        self.gamma = 0.9
        self.memory = deque(maxlen=MAX_MEMORY) # popleft()
        self.model = Linear_QNet(11, 256, 3) #input, hidden, output size
        self.trainer = QTrainer(self.model, lr=LR, gamma=self.gamma)

    def get_state(self, game):
        head = game.snake[0]
        point_l = Point(head.x - 20, head.y)
        point_r = Point(head.x + 20, head.y)
        point_u = Point(head.x, head.y - 20)
        point_d = Point(head.x, head.y + 20)

        #check the direction
        dir_l = game.direction == Direction.LEFT
        dir_r = game.direction == Direction.RIGHT
        dir_u = game.direction == Direction.UP
        dir_d = game.direction == Direction.DOWN
        
        state = [
            #these check whether a neighbor is blocked, checks each side in each direction
            #all of this provides a mapping the agent can use to determine the best move
            (dir_r and game.is_collision(point_r)) or 
            (dir_l and game.is_collision(point_l)) or 
            (dir_u and game.is_collision(point_u)) or 
            (dir_d and game.is_collision(point_d)),
            
            (dir_u and game.is_collision(point_r)) or 
            (dir_d and game.is_collision(point_l)) or 
            (dir_l and game.is_collision(point_u)) or 
            (dir_r and game.is_collision(point_d)),
            
            (dir_d and game.is_collision(point_r)) or 
            (dir_u and game.is_collision(point_l)) or 
            (dir_r and game.is_collision(point_u)) or 
            (dir_l and game.is_collision(point_d)),
            
            # moving direction
            dir_l,
            dir_r,
            dir_u,
            dir_d,
            
            # Food location 
            game.food.x < game.head.x,  
            game.food.x > game.head.x, 
            game.food.y < game.head.y,  
            game.food.y > game.head.y 
        ]
        
        return np.array(state, dtype=int)
    

    def remember(self, state, action, reward, next_state, done):
        self.memory.append((state, action, reward, next_state, done))

    
    def train_long_memory(self):
        if len(self.memory) > BATCH_SIZE:
            mini_sample = random.sample(self.memory, BATCH_SIZE)
        else:
            mini_sample = self.memory

        states, actions, rewards, next_states, dones = zip(*mini_sample)
        self.trainer.train_step(states, actions, rewards, next_states, dones)


    #trains for one game step
    def train_short_memory(self, state, action, reward, next_state, done):
        self.trainer.train_step(state, action, reward, next_state, done)


    def get_action(self, state):
        self.epsilon = 80 - self.num_games
        final_move = [0,0,0]
        if random.randint(0, 200) < self.epsilon:
            move = random.randint(0, 2)
            final_move[move] = 1
        else:
            state_zero = torch.tensor(state, dtype=torch.float)
            prediction = self.model(state_zero)
            move = torch.argmax(prediction).item()
            final_move[move] = 1

        return final_move


def train(agent, game, plot_scores, plot_mean_scores, total_score, record, socketio):
    while True:
        state_old = agent.get_state(game)
        final_move = agent.get_action(state_old)
        reward, done, score = game.play_step(final_move)
        state_new = agent.get_state(game)

        agent.train_short_memory(state_old, final_move, reward, state_new, done)
        agent.remember(state_old, final_move, reward, state_new, done)

        img_data = game.get_image()
        socketio.emit('frame_update', {'frame': img_data}, namespace='/')

        if done:
            game.reset()
            agent.n_games += 1
            agent.train_long_memory()

            if score > record:
                record = score
                agent.model.save()

            print('Game', agent.n_games, 'Score', score, 'Record:', record)

            plot_scores.append(score)
            total_score += score
            mean_score = total_score / agent.n_games
            plot_mean_scores.append(mean_score)
            plot_data = plot(plot_scores, plot_mean_scores)

            socketio.emit('game_update', {
                'game_over': True,
                'score': score,
                'record': record,
                'plot': plot_data
            }, namespace='/')

        eventlet.sleep(0.1)